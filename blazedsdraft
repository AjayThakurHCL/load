package blazeds;

import flex.messaging.io.MessageDeserializer;
import flex.messaging.io.SerializationContext;
import flex.messaging.io.amf.ActionContext;
import flex.messaging.io.amf.ActionMessage;
import flex.messaging.io.amf.Amf3Input;
import flex.messaging.io.amf.AmfMessageDeserializer;
import flex.messaging.io.amf.client.AMFConnection;
import flex.messaging.io.amf.client.exceptions.ClientStatusException;
import flex.messaging.io.amf.client.exceptions.ServerStatusException;
import flex.messaging.messages.AcknowledgeMessage;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args ) throws IOException, ClassNotFoundException {

        String url = "http://census2.herokuapp.com/census2-tests/servlet/CensusServiceServlet?command=getAMF3&rows=20&clientId=6F5A9CE7-802D-CC17-CA35-A4A5611BF796&testId=flex_amf3&sendCensusResultURL=http://census2.herokuapp.com/SendCensusResult&gzip=true";

        URL obj = new URL(url);
        HttpURLConnection connection = (HttpURLConnection) obj.openConnection();

        connection.setRequestMethod("GET");

        InputStream in = new BufferedInputStream(connection.getInputStream());
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        byte[] buf = new byte[1024];
        int n = 0;
        while (-1!=(n=in.read(buf)))
        {
            out.write(buf, 0, n);
        }
        out.close();
        in.close();
        byte[] response = out.toByteArray();



        ActionContext actionContext = new ActionContext();
        SerializationContext serializationContext = new SerializationContext();
        // Class aliases for deserialization, mimics registerClassAlias in Flex
        // Generally only used in rendering as it can cause serious problems for
        // proxy sampling
        serializationContext.createASObjectForMissingType = true;
//		serializationContext.supportRemoteClass=true;
        ByteArrayInputStream bin = new ByteArrayInputStream(response);
        ActionMessage message = new ActionMessage();

        MessageDeserializer deserializer = new AmfMessageDeserializer();
        deserializer.initialize(serializationContext, bin, null);

        try {
            deserializer.readMessage(message, actionContext);
            System.out.println(message.getBodies().);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
